<script>

window.addEventListener('load', function() {
    const input = document.querySelector('#input').value.trim().split('\n');
    const steps = [];
    const dependencies = {};
    input.forEach(i => {
        const m = i.match(/Step ([A-Z]) must be finished before step ([A-Z]) can begin\./);
        if (steps.indexOf(m[1]) == -1) { steps.push(m[1]); }
        if (steps.indexOf(m[2]) == -1) { steps.push(m[2]); }
        if (!dependencies[m[1]]) {
            dependencies[m[1]] = [];
        }
        dependencies[m[2]] = (dependencies[m[2]] || []).concat([m[1]]);
    });
    steps.sort();

    // Part 1
    ((steps, dependencies) => {
        const result = [];

        function step() {
            for (let i = 0; i < steps.length; i++) {
                if (!dependencies[steps[i]].length) {
                    result.push(steps[i]);
                    resolve(steps[i]);
                    return true;
                }
            }
            return false;
        }

        function resolve(s) {
            for (let i in dependencies) {
                if (!dependencies.hasOwnProperty(i)) { continue; }
                let j = dependencies[i].indexOf(s);
                if (j > -1) {
                    dependencies[i].splice(j, 1);
                }
            }
            steps.splice(steps.indexOf(s), 1);
        }

        while (step()) {}
        console.log(`Part 1: ${result.join('')}`);
    })(JSON.parse(JSON.stringify(steps)), JSON.parse(JSON.stringify(dependencies)));
    
    // Part 2
    ((steps, dependencies) => {
        const TIME_OFFSET = 60;
        const WORKERS = 5;
        steps = steps.map(s => ({
            id: s,
            time: TIME_OFFSET + (s.charCodeAt(0) - 64),
            worker: null,
            completed: false
        }));
        const workers = new Array(WORKERS).fill(false);
        const done = [];

        let time = 0;
        let MAX_ITERATIONS = 10000;
        // console.log('Second\t' + workers.map((w, i) => `Worker ${i}`).join('\t') + '\tDone');
        while (true) {
            let allComplete = true;
            steps.forEach(s => {
                if (s.worker !== null) {
                    s.time--;
                    if (s.time <= 0) {
                        done.push(s.id);
                        resolve(s);
                    }
                }
                if (!s.completed) {
                    allComplete = false;
                }
            });
            assignSteps();
            // console.log(time + '\t\t' + workers.map((w, i) => whichStep(i)).join('\t\t\t') + '\t\t\t' + done.join(''));
            if (allComplete || MAX_ITERATIONS-- < 0) {
                break;
            }
            time++;
        }

        function assignSteps() {
            for (let i = 0; i < workers.length; i++) {
                if (!workers[i]) {
                    let step = findNextAvailableStep();
                    if (step) {
                        workers[i] = true;
                        step.worker = i;
                    }
                }
            }
        }

        function findNextAvailableStep() {
            for (let i = 0; i < steps.length; i++) {
                if (
                    !dependencies[steps[i].id].length &&
                    steps[i].worker === null &&
                    !steps[i].completed
                ) {
                    return steps[i];
                }
            }
            return false;
        }

        function resolve(step) {
            for (let i in dependencies) {
                if (!dependencies.hasOwnProperty(i)) { continue; }
                let j = dependencies[i].indexOf(step.id);
                if (j > -1) {
                    dependencies[i].splice(j, 1);
                }
            }
            workers[step.worker] = false;
            step.completed = true;
            step.worker = null;
        }

        function whichStep(worker) {
            for (let i = 0; i < steps.length; i++) {
                if (steps[i].worker == worker) {
                    return steps[i].id;
                }
            }
            return '.';
        }

        console.log(`Part 2: ${time}`);
    })(JSON.parse(JSON.stringify(steps)), JSON.parse(JSON.stringify(dependencies)));
});

</script>
<textarea id="test-1">
Step C must be finished before step A can begin.
Step C must be finished before step F can begin.
Step A must be finished before step B can begin.
Step A must be finished before step D can begin.
Step B must be finished before step E can begin.
Step D must be finished before step E can begin.
Step F must be finished before step E can begin.
</textarea>
<textarea id="input">
Step G must be finished before step S can begin.
Step T must be finished before step Q can begin.
Step A must be finished before step B can begin.
Step H must be finished before step X can begin.
Step V must be finished before step O can begin.
Step Z must be finished before step P can begin.
Step R must be finished before step J can begin.
Step L must be finished before step Y can begin.
Step Y must be finished before step E can begin.
Step W must be finished before step X can begin.
Step X must be finished before step B can begin.
Step K must be finished before step E can begin.
Step Q must be finished before step P can begin.
Step U must be finished before step B can begin.
Step M must be finished before step O can begin.
Step P must be finished before step N can begin.
Step I must be finished before step J can begin.
Step B must be finished before step C can begin.
Step C must be finished before step O can begin.
Step J must be finished before step F can begin.
Step F must be finished before step O can begin.
Step E must be finished before step D can begin.
Step D must be finished before step N can begin.
Step N must be finished before step S can begin.
Step S must be finished before step O can begin.
Step W must be finished before step O can begin.
Step L must be finished before step P can begin.
Step N must be finished before step O can begin.
Step T must be finished before step D can begin.
Step G must be finished before step I can begin.
Step V must be finished before step X can begin.
Step B must be finished before step N can begin.
Step R must be finished before step N can begin.
Step H must be finished before step J can begin.
Step B must be finished before step S can begin.
Step P must be finished before step I can begin.
Step A must be finished before step J can begin.
Step A must be finished before step U can begin.
Step B must be finished before step D can begin.
Step T must be finished before step A can begin.
Step U must be finished before step D can begin.
Step T must be finished before step L can begin.
Step I must be finished before step E can begin.
Step R must be finished before step U can begin.
Step H must be finished before step S can begin.
Step P must be finished before step F can begin.
Step Q must be finished before step C can begin.
Step A must be finished before step P can begin.
Step X must be finished before step E can begin.
Step Q must be finished before step N can begin.
Step E must be finished before step N can begin.
Step Q must be finished before step O can begin.
Step J must be finished before step S can begin.
Step X must be finished before step P can begin.
Step K must be finished before step U can begin.
Step F must be finished before step E can begin.
Step C must be finished before step E can begin.
Step H must be finished before step K can begin.
Step W must be finished before step B can begin.
Step G must be finished before step O can begin.
Step F must be finished before step N can begin.
Step I must be finished before step D can begin.
Step G must be finished before step V can begin.
Step E must be finished before step S can begin.
Step Y must be finished before step P can begin.
Step G must be finished before step E can begin.
Step P must be finished before step J can begin.
Step U must be finished before step N can begin.
Step U must be finished before step F can begin.
Step X must be finished before step U can begin.
Step X must be finished before step C can begin.
Step R must be finished before step Q can begin.
Step Q must be finished before step E can begin.
Step Z must be finished before step E can begin.
Step X must be finished before step F can begin.
Step J must be finished before step D can begin.
Step X must be finished before step M can begin.
Step Y must be finished before step D can begin.
Step K must be finished before step J can begin.
Step Z must be finished before step J can begin.
Step M must be finished before step P can begin.
Step T must be finished before step M can begin.
Step F must be finished before step S can begin.
Step P must be finished before step S can begin.
Step X must be finished before step I can begin.
Step U must be finished before step J can begin.
Step M must be finished before step B can begin.
Step Q must be finished before step D can begin.
Step Z must be finished before step I can begin.
Step D must be finished before step S can begin.
Step J must be finished before step N can begin.
Step D must be finished before step O can begin.
Step T must be finished before step H can begin.
Step P must be finished before step D can begin.
Step M must be finished before step F can begin.
Step Y must be finished before step S can begin.
Step H must be finished before step I can begin.
Step Y must be finished before step W can begin.
Step X must be finished before step J can begin.
Step L must be finished before step W can begin.
Step G must be finished before step N can begin.
</textarea>
